attribute @DtoReadOnly()
attribute @DtoCreateHidden()
attribute @DtoUpdateHidden()
attribute @DtoEntityHidden()
attribute @DtoApiHidden()
attribute @DtoCreateOptional()
attribute @DtoUpdateOptional()
attribute @DtoRelationRequired()
attribute @DtoRelationCanCreateOnCreate()
attribute @DtoRelationCanConnectOnCreate()
attribute @DtoRelationCanCreateOnUpdate()
attribute @DtoRelationCanConnectOnUpdate()
attribute @DtoRelationCanDisconnectOnUpdate()
attribute @DtoRelationIncludeId()
attribute @DtoTypeFullUpdate()

datasource db {
    provider = 'postgresql'
    url = env('DATABASE_URL')
}

generator client {
    provider = "prisma-client-js"
}

generator nestjsDto {
    provider                        = "prisma-generator-nestjs-dto"
    output                          = "../src/prisma/models"
    outputToNestJsResourceStructure = "false"
    flatResourceStructure           = "false"
    exportRelationModifierClasses   = "true"
    reExport                        = "true"
    createDtoPrefix                 = "Create"
    updateDtoPrefix                 = "Update"
    dtoSuffix                       = "Dto"
    entityPrefix                    = ""
    entitySuffix                    = ""
    classValidation                 = "true"
    fileNamingStyle                 = "camel"
    noDependencies                  = "false"
    outputType                      = "class"
    definiteAssignmentAssertion     = "false"
    requiredResponseApiProperty     = "true"
    prettier                        = "true"
}

plugin prisma {
    provider = '@core/prisma'
    format = true
    output = "./prisma/schema.prisma"
    customAttributesAsComments = true
}

abstract model Base {
    id        String   @id @default(cuid()) @DtoReadOnly
    createdAt DateTime @default(now()) @map('created_at') @DtoReadOnly
    updatedAt DateTime @updatedAt @map('updated_at') @DtoReadOnly
    createdBy String?  @map('created_by') @default(auth().id) @DtoReadOnly
    updatedBy String?  @map('updated_by') @default(auth().id) @DtoReadOnly

    @@deny('all', auth() == null)
}

abstract model BaseWithTenant extends Base {
    tenant   Tenant @relation(fields: [tenantId], references: [id]) @DtoEntityHidden
    tenantId String @map('tenant_id') @DtoReadOnly

    @@allow('all', tenant.users?[user == auth()])
}

model Tenant extends Base {
    name  String
    slug  String       @unique
    users TenantUser[] @DtoEntityHidden
    posts Post[]       @DtoEntityHidden
    roles Role[]       @DtoEntityHidden

    @@map('tenant')
    @@allow('all', users?[user == auth()])
}

model User extends Base {
    name    String       @length(1, 64)
    email   String       @unique @email @length(6, 32)
    posts   Post[]       @DtoEntityHidden
    tenants TenantUser[]
    roles   RoleUser[]

    @@map('user')
    @@allow('all', tenants?[tenant.users?[user == auth()]])
}

model TenantUser extends BaseWithTenant {
    user   User   @relation(fields: [userId], references: [id])
    userId String @map('user_id')

    @@unique([tenantId, userId])
    @@map('tenant_user')
}


model Permission extends Base {
    action     String
    subject    String
    fields     String[]
    conditions Json?
    inverted   Boolean          @default(false)
    reason     String?
    roles      RolePermission[]

    @@unique([action, subject])
    @@map('permission')
}

model RolePermission extends Base {
    role         Role       @relation(fields: [roleId], references: [id])
    roleId       String     @map('role_id')
    permission   Permission @relation(fields: [permissionId], references: [id])
    permissionId String     @map('permission_id')

    @@unique([roleId, permissionId])
    @@map('role_permission')
}

model Role extends BaseWithTenant {
    name        String
    description String?
    permissions RolePermission[]
    users       RoleUser[]

    @@map('role')
}

model RoleUser extends Base {
    role   Role   @relation(fields: [roleId], references: [id])
    roleId String @map('role_id')
    user   User   @relation(fields: [userId], references: [id])
    userId String @map('user_id')

    @@unique([roleId, userId])
    @@map('role_user')
}


model Post extends BaseWithTenant {
    title     String  @length(1, 256)
    content   String
    published Boolean @default(false) @DtoCreateOptional @DtoUpdateOptional
    author    User    @relation(fields: [authorId], references: [id])
    authorId  String  @map('author_id') @DtoRelationIncludeId

    @@map('post')
}
