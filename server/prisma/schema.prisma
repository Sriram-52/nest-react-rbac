//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator nestjsDto {
  provider                        = "prisma-generator-nestjs-dto"
  output                          = "../src/prisma/models"
  outputToNestJsResourceStructure = "false"
  flatResourceStructure           = "false"
  exportRelationModifierClasses   = "true"
  reExport                        = "true"
  createDtoPrefix                 = "Create"
  updateDtoPrefix                 = "Update"
  dtoSuffix                       = "Dto"
  entityPrefix                    = ""
  entitySuffix                    = ""
  classValidation                 = "true"
  fileNamingStyle                 = "camel"
  noDependencies                  = "false"
  outputType                      = "class"
  definiteAssignmentAssertion     = "false"
  requiredResponseApiProperty     = "true"
  prettier                        = "true"
}

/// @@deny('all', auth() == null)
/// @@allow('all', users?[user == auth()])
model Tenant {
  /// @DtoReadOnly
  id        String       @id() @default(cuid())
  /// @DtoReadOnly
  createdAt DateTime     @default(now()) @map("created_at")
  /// @DtoReadOnly
  updatedAt DateTime     @updatedAt() @map("updated_at")
  /// @DtoReadOnly
  createdBy String?      @map("created_by")
  /// @DtoReadOnly
  updatedBy String?      @map("updated_by")
  name      String
  slug      String       @unique()
  /// @DtoEntityHidden
  users     TenantUser[]
  /// @DtoEntityHidden
  posts     Post[]
  /// @DtoEntityHidden
  roles     Role[]

  @@map("tenant")
}

/// @@deny('all', auth() == null)
/// @@allow('all', tenants?[tenant.users?[user == auth()]])
model User {
  /// @DtoReadOnly
  id        String       @id() @default(cuid())
  /// @DtoReadOnly
  createdAt DateTime     @default(now()) @map("created_at")
  /// @DtoReadOnly
  updatedAt DateTime     @updatedAt() @map("updated_at")
  /// @DtoReadOnly
  createdBy String?      @map("created_by")
  /// @DtoReadOnly
  updatedBy String?      @map("updated_by")
  /// @length(1, 64)
  name      String
  /// @email
  /// @length(6, 32)
  email     String       @unique()
  /// @DtoEntityHidden
  posts     Post[]
  tenants   TenantUser[]
  roles     RoleUser[]

  @@map("user")
}

/// @@deny('all', auth() == null)
/// @@allow('all', tenant.users?[user == auth()])
model TenantUser {
  /// @DtoReadOnly
  id        String   @id() @default(cuid())
  /// @DtoReadOnly
  createdAt DateTime @default(now()) @map("created_at")
  /// @DtoReadOnly
  updatedAt DateTime @updatedAt() @map("updated_at")
  /// @DtoReadOnly
  createdBy String?  @map("created_by")
  /// @DtoReadOnly
  updatedBy String?  @map("updated_by")
  /// @DtoEntityHidden
  tenant    Tenant   @relation(fields: [tenantId], references: [id])
  /// @DtoReadOnly
  tenantId  String   @map("tenant_id")
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @map("user_id")

  @@unique([tenantId, userId])
  @@map("tenant_user")
}

/// @@deny('all', auth() == null)
model Permission {
  /// @DtoReadOnly
  id         String           @id() @default(cuid())
  /// @DtoReadOnly
  createdAt  DateTime         @default(now()) @map("created_at")
  /// @DtoReadOnly
  updatedAt  DateTime         @updatedAt() @map("updated_at")
  /// @DtoReadOnly
  createdBy  String?          @map("created_by")
  /// @DtoReadOnly
  updatedBy  String?          @map("updated_by")
  action     String
  subject    String
  fields     String[]
  conditions Json?
  inverted   Boolean          @default(false)
  reason     String?
  roles      RolePermission[]

  @@unique([action, subject])
  @@map("permission")
}

/// @@deny('all', auth() == null)
model RolePermission {
  /// @DtoReadOnly
  id           String     @id() @default(cuid())
  /// @DtoReadOnly
  createdAt    DateTime   @default(now()) @map("created_at")
  /// @DtoReadOnly
  updatedAt    DateTime   @updatedAt() @map("updated_at")
  /// @DtoReadOnly
  createdBy    String?    @map("created_by")
  /// @DtoReadOnly
  updatedBy    String?    @map("updated_by")
  role         Role       @relation(fields: [roleId], references: [id])
  roleId       String     @map("role_id")
  permission   Permission @relation(fields: [permissionId], references: [id])
  permissionId String     @map("permission_id")

  @@unique([roleId, permissionId])
  @@map("role_permission")
}

/// @@deny('all', auth() == null)
/// @@allow('all', tenant.users?[user == auth()])
model Role {
  /// @DtoReadOnly
  id          String           @id() @default(cuid())
  /// @DtoReadOnly
  createdAt   DateTime         @default(now()) @map("created_at")
  /// @DtoReadOnly
  updatedAt   DateTime         @updatedAt() @map("updated_at")
  /// @DtoReadOnly
  createdBy   String?          @map("created_by")
  /// @DtoReadOnly
  updatedBy   String?          @map("updated_by")
  /// @DtoEntityHidden
  tenant      Tenant           @relation(fields: [tenantId], references: [id])
  /// @DtoReadOnly
  tenantId    String           @map("tenant_id")
  name        String
  description String?
  permissions RolePermission[]
  users       RoleUser[]

  @@map("role")
}

/// @@deny('all', auth() == null)
model RoleUser {
  /// @DtoReadOnly
  id        String   @id() @default(cuid())
  /// @DtoReadOnly
  createdAt DateTime @default(now()) @map("created_at")
  /// @DtoReadOnly
  updatedAt DateTime @updatedAt() @map("updated_at")
  /// @DtoReadOnly
  createdBy String?  @map("created_by")
  /// @DtoReadOnly
  updatedBy String?  @map("updated_by")
  role      Role     @relation(fields: [roleId], references: [id])
  roleId    String   @map("role_id")
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @map("user_id")

  @@unique([roleId, userId])
  @@map("role_user")
}

/// @@deny('all', auth() == null)
/// @@allow('all', tenant.users?[user == auth()])
model Post {
  /// @DtoReadOnly
  id        String   @id() @default(cuid())
  /// @DtoReadOnly
  createdAt DateTime @default(now()) @map("created_at")
  /// @DtoReadOnly
  updatedAt DateTime @updatedAt() @map("updated_at")
  /// @DtoReadOnly
  createdBy String?  @map("created_by")
  /// @DtoReadOnly
  updatedBy String?  @map("updated_by")
  /// @DtoEntityHidden
  tenant    Tenant   @relation(fields: [tenantId], references: [id])
  /// @DtoReadOnly
  tenantId  String   @map("tenant_id")
  /// @length(1, 256)
  title     String
  content   String
  /// @DtoCreateOptional
  /// @DtoUpdateOptional
  published Boolean  @default(false)
  author    User     @relation(fields: [authorId], references: [id])
  /// @DtoRelationIncludeId
  authorId  String   @map("author_id")

  @@map("post")
}
