/**
 * Generated by orval v7.5.0 üç∫
 * Do not edit manually.
 * Nest React RBAC API
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
	DataTag,
	DefinedInitialDataOptions,
	DefinedUseQueryResult,
	MutationFunction,
	QueryFunction,
	QueryKey,
	UndefinedInitialDataOptions,
	UseMutationOptions,
	UseMutationResult,
	UseQueryOptions,
	UseQueryResult,
} from "@tanstack/react-query";
import type {
	CreatePostDto,
	PostDto,
	PostsControllerCreate201,
	PostsControllerUpdate200,
	SuccessResponseDto,
	UpdatePostDto,
} from "../../models";
import { http } from "../../../mutator/http";

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

export const postsControllerCreate = (
	createPostDto: CreatePostDto,
	options?: SecondParameter<typeof http>,
	signal?: AbortSignal,
) => {
	return http<PostsControllerCreate201>(
		{
			url: `/api/posts`,
			method: "POST",
			headers: { "Content-Type": "application/json" },
			data: createPostDto,
			signal,
		},
		options,
	);
};

export const getPostsControllerCreateMutationOptions = <
	TError = unknown,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof postsControllerCreate>>,
		TError,
		{ data: CreatePostDto },
		TContext
	>;
	request?: SecondParameter<typeof http>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof postsControllerCreate>>,
	TError,
	{ data: CreatePostDto },
	TContext
> => {
	const mutationKey = ["postsControllerCreate"];
	const { mutation: mutationOptions, request: requestOptions } = options
		? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey }, request: undefined };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof postsControllerCreate>>,
		{ data: CreatePostDto }
	> = (props) => {
		const { data } = props ?? {};

		return postsControllerCreate(data, requestOptions);
	};

	return { mutationFn, ...mutationOptions };
};

export type PostsControllerCreateMutationResult = NonNullable<
	Awaited<ReturnType<typeof postsControllerCreate>>
>;
export type PostsControllerCreateMutationBody = CreatePostDto;
export type PostsControllerCreateMutationError = unknown;

export const usePostsControllerCreate = <TError = unknown, TContext = unknown>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof postsControllerCreate>>,
		TError,
		{ data: CreatePostDto },
		TContext
	>;
	request?: SecondParameter<typeof http>;
}): UseMutationResult<
	Awaited<ReturnType<typeof postsControllerCreate>>,
	TError,
	{ data: CreatePostDto },
	TContext
> => {
	const mutationOptions = getPostsControllerCreateMutationOptions(options);

	return useMutation(mutationOptions);
};
export const postsControllerIndAll = (
	options?: SecondParameter<typeof http>,
	signal?: AbortSignal,
) => {
	return http<PostDto[]>({ url: `/api/posts`, method: "GET", signal }, options);
};

export const getPostsControllerIndAllQueryKey = () => {
	return [`/api/posts`] as const;
};

export const getPostsControllerIndAllQueryOptions = <
	TData = Awaited<ReturnType<typeof postsControllerIndAll>>,
	TError = unknown,
>(options?: {
	query?: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof postsControllerIndAll>>, TError, TData>
	>;
	request?: SecondParameter<typeof http>;
}) => {
	const { query: queryOptions, request: requestOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getPostsControllerIndAllQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof postsControllerIndAll>>> = ({ signal }) =>
		postsControllerIndAll(requestOptions, signal);

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof postsControllerIndAll>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type PostsControllerIndAllQueryResult = NonNullable<
	Awaited<ReturnType<typeof postsControllerIndAll>>
>;
export type PostsControllerIndAllQueryError = unknown;

export function usePostsControllerIndAll<
	TData = Awaited<ReturnType<typeof postsControllerIndAll>>,
	TError = unknown,
>(options: {
	query: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof postsControllerIndAll>>, TError, TData>
	> &
		Pick<
			DefinedInitialDataOptions<
				Awaited<ReturnType<typeof postsControllerIndAll>>,
				TError,
				Awaited<ReturnType<typeof postsControllerIndAll>>
			>,
			"initialData"
		>;
	request?: SecondParameter<typeof http>;
}): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePostsControllerIndAll<
	TData = Awaited<ReturnType<typeof postsControllerIndAll>>,
	TError = unknown,
>(options?: {
	query?: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof postsControllerIndAll>>, TError, TData>
	> &
		Pick<
			UndefinedInitialDataOptions<
				Awaited<ReturnType<typeof postsControllerIndAll>>,
				TError,
				Awaited<ReturnType<typeof postsControllerIndAll>>
			>,
			"initialData"
		>;
	request?: SecondParameter<typeof http>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePostsControllerIndAll<
	TData = Awaited<ReturnType<typeof postsControllerIndAll>>,
	TError = unknown,
>(options?: {
	query?: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof postsControllerIndAll>>, TError, TData>
	>;
	request?: SecondParameter<typeof http>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function usePostsControllerIndAll<
	TData = Awaited<ReturnType<typeof postsControllerIndAll>>,
	TError = unknown,
>(options?: {
	query?: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof postsControllerIndAll>>, TError, TData>
	>;
	request?: SecondParameter<typeof http>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getPostsControllerIndAllQueryOptions(options);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const postsControllerFindOne = (
	id: string,
	options?: SecondParameter<typeof http>,
	signal?: AbortSignal,
) => {
	return http<PostDto>({ url: `/api/posts/${id}`, method: "GET", signal }, options);
};

export const getPostsControllerFindOneQueryKey = (id: string) => {
	return [`/api/posts/${id}`] as const;
};

export const getPostsControllerFindOneQueryOptions = <
	TData = Awaited<ReturnType<typeof postsControllerFindOne>>,
	TError = unknown,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof postsControllerFindOne>>, TError, TData>
		>;
		request?: SecondParameter<typeof http>;
	},
) => {
	const { query: queryOptions, request: requestOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getPostsControllerFindOneQueryKey(id);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof postsControllerFindOne>>> = ({ signal }) =>
		postsControllerFindOne(id, requestOptions, signal);

	return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof postsControllerFindOne>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type PostsControllerFindOneQueryResult = NonNullable<
	Awaited<ReturnType<typeof postsControllerFindOne>>
>;
export type PostsControllerFindOneQueryError = unknown;

export function usePostsControllerFindOne<
	TData = Awaited<ReturnType<typeof postsControllerFindOne>>,
	TError = unknown,
>(
	id: string,
	options: {
		query: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof postsControllerFindOne>>, TError, TData>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof postsControllerFindOne>>,
					TError,
					Awaited<ReturnType<typeof postsControllerFindOne>>
				>,
				"initialData"
			>;
		request?: SecondParameter<typeof http>;
	},
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePostsControllerFindOne<
	TData = Awaited<ReturnType<typeof postsControllerFindOne>>,
	TError = unknown,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof postsControllerFindOne>>, TError, TData>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof postsControllerFindOne>>,
					TError,
					Awaited<ReturnType<typeof postsControllerFindOne>>
				>,
				"initialData"
			>;
		request?: SecondParameter<typeof http>;
	},
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePostsControllerFindOne<
	TData = Awaited<ReturnType<typeof postsControllerFindOne>>,
	TError = unknown,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof postsControllerFindOne>>, TError, TData>
		>;
		request?: SecondParameter<typeof http>;
	},
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function usePostsControllerFindOne<
	TData = Awaited<ReturnType<typeof postsControllerFindOne>>,
	TError = unknown,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof postsControllerFindOne>>, TError, TData>
		>;
		request?: SecondParameter<typeof http>;
	},
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getPostsControllerFindOneQueryOptions(id, options);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const postsControllerUpdate = (
	id: string,
	updatePostDto: UpdatePostDto,
	options?: SecondParameter<typeof http>,
) => {
	return http<PostsControllerUpdate200>(
		{
			url: `/api/posts/${id}`,
			method: "PATCH",
			headers: { "Content-Type": "application/json" },
			data: updatePostDto,
		},
		options,
	);
};

export const getPostsControllerUpdateMutationOptions = <
	TError = unknown,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof postsControllerUpdate>>,
		TError,
		{ id: string; data: UpdatePostDto },
		TContext
	>;
	request?: SecondParameter<typeof http>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof postsControllerUpdate>>,
	TError,
	{ id: string; data: UpdatePostDto },
	TContext
> => {
	const mutationKey = ["postsControllerUpdate"];
	const { mutation: mutationOptions, request: requestOptions } = options
		? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey }, request: undefined };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof postsControllerUpdate>>,
		{ id: string; data: UpdatePostDto }
	> = (props) => {
		const { id, data } = props ?? {};

		return postsControllerUpdate(id, data, requestOptions);
	};

	return { mutationFn, ...mutationOptions };
};

export type PostsControllerUpdateMutationResult = NonNullable<
	Awaited<ReturnType<typeof postsControllerUpdate>>
>;
export type PostsControllerUpdateMutationBody = UpdatePostDto;
export type PostsControllerUpdateMutationError = unknown;

export const usePostsControllerUpdate = <TError = unknown, TContext = unknown>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof postsControllerUpdate>>,
		TError,
		{ id: string; data: UpdatePostDto },
		TContext
	>;
	request?: SecondParameter<typeof http>;
}): UseMutationResult<
	Awaited<ReturnType<typeof postsControllerUpdate>>,
	TError,
	{ id: string; data: UpdatePostDto },
	TContext
> => {
	const mutationOptions = getPostsControllerUpdateMutationOptions(options);

	return useMutation(mutationOptions);
};
export const postsControllerRemove = (id: string, options?: SecondParameter<typeof http>) => {
	return http<SuccessResponseDto>({ url: `/api/posts/${id}`, method: "DELETE" }, options);
};

export const getPostsControllerRemoveMutationOptions = <
	TError = unknown,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof postsControllerRemove>>,
		TError,
		{ id: string },
		TContext
	>;
	request?: SecondParameter<typeof http>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof postsControllerRemove>>,
	TError,
	{ id: string },
	TContext
> => {
	const mutationKey = ["postsControllerRemove"];
	const { mutation: mutationOptions, request: requestOptions } = options
		? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey }, request: undefined };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof postsControllerRemove>>,
		{ id: string }
	> = (props) => {
		const { id } = props ?? {};

		return postsControllerRemove(id, requestOptions);
	};

	return { mutationFn, ...mutationOptions };
};

export type PostsControllerRemoveMutationResult = NonNullable<
	Awaited<ReturnType<typeof postsControllerRemove>>
>;

export type PostsControllerRemoveMutationError = unknown;

export const usePostsControllerRemove = <TError = unknown, TContext = unknown>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof postsControllerRemove>>,
		TError,
		{ id: string },
		TContext
	>;
	request?: SecondParameter<typeof http>;
}): UseMutationResult<
	Awaited<ReturnType<typeof postsControllerRemove>>,
	TError,
	{ id: string },
	TContext
> => {
	const mutationOptions = getPostsControllerRemoveMutationOptions(options);

	return useMutation(mutationOptions);
};
