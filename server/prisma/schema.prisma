//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator nestjsDto {
  provider                        = "prisma-generator-nestjs-dto"
  output                          = "../src/prisma/models"
  outputToNestJsResourceStructure = "false"
  flatResourceStructure           = "false"
  exportRelationModifierClasses   = "true"
  reExport                        = "true"
  createDtoPrefix                 = "Create"
  updateDtoPrefix                 = "Update"
  dtoSuffix                       = "Dto"
  entityPrefix                    = ""
  entitySuffix                    = ""
  classValidation                 = "true"
  fileNamingStyle                 = "camel"
  noDependencies                  = "false"
  outputType                      = "class"
  definiteAssignmentAssertion     = "false"
  requiredResponseApiProperty     = "true"
  prettier                        = "true"
}

/// @@deny('all', auth() == null)
model Tenant {
  /// @DtoReadOnly
  id        String       @id() @default(cuid())
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  createdAt DateTime     @default(now()) @map("created_at")
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  updatedAt DateTime     @updatedAt() @map("updated_at")
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  createdBy String?      @map("created_by")
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  updatedBy String?      @map("updated_by")
  name      String
  slug      String       @unique()
  /// @DtoEntityHidden
  users     TenantUser[]
  /// @DtoEntityHidden
  posts     Post[]

  @@map("tenant")
}

/// @@deny('all', auth() == null)
model User {
  /// @DtoReadOnly
  id        String       @id() @default(cuid())
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  createdAt DateTime     @default(now()) @map("created_at")
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  updatedAt DateTime     @updatedAt() @map("updated_at")
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  createdBy String?      @map("created_by")
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  updatedBy String?      @map("updated_by")
  /// @length(1, 64)
  name      String
  /// @email
  /// @length(6, 32)
  email     String       @unique()
  /// @DtoEntityHidden
  posts     Post[]
  tenants   TenantUser[]

  @@map("user")
}

/// @@deny('all', auth() == null)
/// @@allow('all', tenant.users?[user == auth()])
model TenantUser {
  /// @DtoReadOnly
  id        String   @id() @default(cuid())
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  createdAt DateTime @default(now()) @map("created_at")
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  updatedAt DateTime @updatedAt() @map("updated_at")
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  createdBy String?  @map("created_by")
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  updatedBy String?  @map("updated_by")
  tenant    Tenant   @relation(fields: [tenantId], references: [id])
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  tenantId  String   @map("tenant_id")
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @map("user_id")

  @@unique([tenantId, userId])
  @@map("tenant_user")
}

/// @@deny('all', auth() == null)
/// @@allow('all', tenant.users?[user == auth()])
model Post {
  /// @DtoReadOnly
  id        String   @id() @default(cuid())
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  createdAt DateTime @default(now()) @map("created_at")
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  updatedAt DateTime @updatedAt() @map("updated_at")
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  createdBy String?  @map("created_by")
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  updatedBy String?  @map("updated_by")
  tenant    Tenant   @relation(fields: [tenantId], references: [id])
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  tenantId  String   @map("tenant_id")
  /// @length(1, 256)
  title     String
  content   String
  /// @DtoCreateOptional
  /// @DtoUpdateOptional
  published Boolean  @default(false)
  author    User     @relation(fields: [authorId], references: [id])
  /// @DtoRelationIncludeId
  authorId  String   @map("author_id")

  @@map("post")
}
